{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\r_mur\\\\Downloads\\\\NFTwebsitefull\\\\NFTwebsite\\\\NFTwebsite\\\\src\\\\components\\\\Marketplace.js\",\n    _s = $RefreshSig$();\n\nimport NFTTile from \"./NFTTile\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { GetIpfsUrlFromPinata } from \"../utils\";\nimport \"./marketplace.css\";\nimport Filter from \"./Filter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/*#__PURE__*/\n_jsxDEV(\"div\", {\n  styleName: \"\"\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 9,\n  columnNumber: 1\n}, this);\n\nexport default function Marketplace() {\n  _s();\n\n  const sampleData = [{\n    \"title\": \"NFT#1\",\n    \"description\": \"First NFT\",\n    \"website\": \"http://axieinfinity.io\",\n    \"image\": \"https://ipfs.io/ipfs/QmQqzMTavQgT4f4T5v6PWBp7XNKtoPmC9jvn12WPT3gkSE\",\n    \"price\": \"0.03ETH\",\n    \"currentlySelling\": \"True\",\n    \"address\": \"0xe81Bf5A757CB4f7F82a2F23b1e59bE45c33c5b13\"\n  }, {\n    \"title\": \"NFT#2\",\n    \"description\": \"Second NFT\",\n    \"website\": \"http://axieinfinity.io\",\n    \"image\": \"https://gateway.pinata.cloud/ipfs/Qma6NCfHkZ1S4e7tH5k6kyivfmLSDo1LmDeTf5o7WPpYxh?_gl=1*l689av*_ga*MjAwNDE1OTM3NC4xNjkxNjQzODA1*_ga_5RMPXG14TE*MTY5MjI1MzcxNy42LjEuMTY5MjI1MzczNS40Mi4wLjA\",\n    \"price\": \"0.03ETH\",\n    \"currentlySelling\": \"True\",\n    \"address\": \"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\"\n  }, {\n    \"title\": \"NFT#3\",\n    \"description\": \"Third NFT\",\n    \"website\": \"http://axieinfinity.io\",\n    \"image\": \"https://gateway.pinata.cloud/ipfs/QmbG9dKcJwvdbirK6NY3C1kw7Y8oVKWXgwYdJ1in3K4ke8?_gl=1*10ougf7*_ga*MjAwNDE1OTM3NC4xNjkxNjQzODA1*_ga_5RMPXG14TE*MTY5MjI1MzcxNy42LjEuMTY5MjI1MzczNS40Mi4wLjA.\",\n    \"price\": \"0.03ETH\",\n    \"currentlySelling\": \"True\",\n    \"address\": \"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\"\n  }];\n  const [data, updateData] = useState(sampleData);\n  const [dataFetched, updateFetched] = useState(false);\n\n  async function getAllNFTs() {\n    const ethers = require(\"ethers\"); //After adding your Hardhat network to your metamask, this code will get providers and signers\n\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner(); //Pull the deployed contract instance\n\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer); //create an NFT Token\n\n    let transaction = await contract.getAllNFTs(); //Fetch all the details of every NFT from the contract and display\n\n    const items = await Promise.all(transaction.map(async i => {\n      var tokenURI = await contract.tokenURI(i.tokenId);\n      console.log(\"getting this tokenUri\", tokenURI);\n      tokenURI = GetIpfsUrlFromPinata(tokenURI);\n      let meta = await axios.get(tokenURI);\n      meta = meta.data;\n      let price = ethers.utils.formatUnits(i.price.toString(), 'ether');\n      let item = {\n        price,\n        tokenId: i.tokenId.toNumber(),\n        seller: i.seller,\n        owner: i.owner,\n        image: meta.image,\n        name: meta.name,\n        description: meta.description\n      };\n      return item;\n    }));\n    updateFetched(true);\n    updateData(items);\n  }\n\n  if (!dataFetched) getAllNFTs();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col place-items-center  \",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"md:text-xl font-bold text-white tf-r-bg-blob\",\n        children: \"Top NFTs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Filter, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \" abzar heading-gradient\",\n        children: \"Top NFTs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\",\n        children: data.map((value, index) => {\n          return /*#__PURE__*/_jsxDEV(NFTTile, {\n            data: value\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 28\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Marketplace, \"eoOZIC3fpxTnVeH+5XYnEv0RFm0=\");\n\n_c = Marketplace;\n\nvar _c;\n\n$RefreshReg$(_c, \"Marketplace\");","map":{"version":3,"names":["NFTTile","MarketplaceJSON","axios","useState","GetIpfsUrlFromPinata","Filter","Marketplace","sampleData","data","updateData","dataFetched","updateFetched","getAllNFTs","ethers","require","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","address","abi","transaction","items","Promise","all","map","i","tokenURI","tokenId","console","log","meta","get","price","utils","formatUnits","toString","item","toNumber","seller","owner","image","name","description","value","index"],"sources":["C:/Users/r_mur/Downloads/NFTwebsitefull/NFTwebsite/NFTwebsite/src/components/Marketplace.js"],"sourcesContent":["\nimport NFTTile from \"./NFTTile\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { GetIpfsUrlFromPinata } from \"../utils\";\nimport \"./marketplace.css\"\nimport Filter from \"./Filter\";\n<div styleName=\"\"></div>\n\n\n\nexport default function Marketplace() {\nconst sampleData = [\n    {\n        \"title\": \"NFT#1\",\n        \"description\": \"First NFT\",\n        \"website\":\"http://axieinfinity.io\",\n        \"image\":\"https://ipfs.io/ipfs/QmQqzMTavQgT4f4T5v6PWBp7XNKtoPmC9jvn12WPT3gkSE\",\n        \"price\":\"0.03ETH\",\n        \"currentlySelling\":\"True\",\n        \"address\":\"0xe81Bf5A757CB4f7F82a2F23b1e59bE45c33c5b13\",\n    },\n    {\n        \"title\": \"NFT#2\",\n        \"description\": \"Second NFT\",\n        \"website\":\"http://axieinfinity.io\",\n        \"image\":\"https://gateway.pinata.cloud/ipfs/Qma6NCfHkZ1S4e7tH5k6kyivfmLSDo1LmDeTf5o7WPpYxh?_gl=1*l689av*_ga*MjAwNDE1OTM3NC4xNjkxNjQzODA1*_ga_5RMPXG14TE*MTY5MjI1MzcxNy42LjEuMTY5MjI1MzczNS40Mi4wLjA\",\n        \"price\":\"0.03ETH\",\n        \"currentlySelling\":\"True\",\n        \"address\":\"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\",\n    },\n    {\n        \"title\": \"NFT#3\",\n        \"description\": \"Third NFT\",\n        \"website\":\"http://axieinfinity.io\",\n        \"image\":\"https://gateway.pinata.cloud/ipfs/QmbG9dKcJwvdbirK6NY3C1kw7Y8oVKWXgwYdJ1in3K4ke8?_gl=1*10ougf7*_ga*MjAwNDE1OTM3NC4xNjkxNjQzODA1*_ga_5RMPXG14TE*MTY5MjI1MzcxNy42LjEuMTY5MjI1MzczNS40Mi4wLjA.\",\n        \"price\":\"0.03ETH\",\n        \"currentlySelling\":\"True\",\n        \"address\":\"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\",\n    },\n];\nconst [data, updateData] = useState(sampleData);\nconst [dataFetched, updateFetched] = useState(false);\n\nasync function getAllNFTs() {\n    const ethers = require(\"ethers\");\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer)\n    //create an NFT Token\n    let transaction = await contract.getAllNFTs()\n\n    //Fetch all the details of every NFT from the contract and display\n    const items = await Promise.all(transaction.map(async i => {\n        var tokenURI = await contract.tokenURI(i.tokenId);\n        console.log(\"getting this tokenUri\", tokenURI);\n        tokenURI = GetIpfsUrlFromPinata(tokenURI);\n        let meta = await axios.get(tokenURI);\n        meta = meta.data;\n\n        let price = ethers.utils.formatUnits(i.price.toString(), 'ether');\n        let item = {\n            price,\n            tokenId: i.tokenId.toNumber(),\n            seller: i.seller,\n            owner: i.owner,\n            image: meta.image,\n            name: meta.name,\n            description: meta.description,\n        }\n        return item;\n    }))\n\n    updateFetched(true);\n    updateData(items);\n}\n\nif(!dataFetched)\n    getAllNFTs();\n\nreturn (\n    <div>\n        \n        <div className=\"flex flex-col place-items-center  \">\n            <div className=\"md:text-xl font-bold text-white tf-r-bg-blob\">\n                Top NFTs\n            </div>\n            <Filter></Filter>\n            \n            <span className=\" abzar heading-gradient\">Top NFTs</span>\n\n            <div className=\"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\">\n                {data.map((value, index) => {\n                    return <NFTTile data={value} key={index}></NFTTile>;\n                })}\n            </div>\n            \n            </div>\n        </div>\n   \n\n    \n);\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}